From dbb891d50333f0d56c3ac144a763c14f53458381 Mon Sep 17 00:00:00 2001
From: Mark Harfouche <mark.harfouche@gmail.com>
Date: Thu, 16 Nov 2023 17:52:27 -0500
Subject: [PATCH] Use conda-forge's system libraries for wgpu-native

---
 setup.py                          | 16 ----------------
 wgpu/backends/wgpu_native/_ffi.py | 21 +++++----------------
 2 files changed, 5 insertions(+), 32 deletions(-)

diff --git a/setup.py b/setup.py
index 4cef84e..8fcd393 100644
--- a/setup.py
+++ b/setup.py
@@ -2,7 +2,6 @@ import re
 import platform
 
 from setuptools import find_packages, setup
-from wheel.bdist_wheel import get_platform, bdist_wheel as _bdist_wheel
 
 
 NAME = "wgpu"
@@ -12,21 +11,8 @@ with open(f"{NAME}/__init__.py") as fh:
     VERSION = re.search(r"__version__ = \"(.*?)\"", fh.read()).group(1)
 
 
-class bdist_wheel(_bdist_wheel):  # noqa: N801
-    def finalize_options(self):
-        self.plat_name = get_platform(None)  # force a platform tag
-        _bdist_wheel.finalize_options(self)
-
 
 resources_globs = ["*.h", "*.idl"]
-if platform.system() == "Linux":
-    resources_globs.append("*-release.so")
-elif platform.system() == "Darwin":
-    resources_globs.append("*-release.dylib")
-elif platform.system() == "Windows":
-    resources_globs.append("*-release.dll")
-else:
-    pass  # don't include binaries; user will have to arrange for the lib
 
 runtime_deps = ["cffi>=1.15.0", "rubicon-objc>=0.4.1; sys_platform == 'darwin'"]
 extra_deps = {
@@ -52,8 +38,6 @@ setup(
     author="Almar Klein",
     author_email="almar.klein@gmail.com",
     url="https://github.com/pygfx/wgpu-py",
-    cmdclass={"bdist_wheel": bdist_wheel},
-    data_files=[("", ["LICENSE"])],
     entry_points={
         "pyinstaller40": [
             "hook-dirs = wgpu.__pyinstaller:get_hook_dirs",
diff --git a/wgpu/backends/wgpu_native/_ffi.py b/wgpu/backends/wgpu_native/_ffi.py
index 823aee1..6d7d9f9 100644
--- a/wgpu/backends/wgpu_native/_ffi.py
+++ b/wgpu/backends/wgpu_native/_ffi.py
@@ -65,32 +65,21 @@ def get_wgpu_lib_path():
     if override_path:
         return override_path
 
-    # Load the debug binary if requested
-    debug_mode = os.getenv("WGPU_DEBUG", "").strip() == "1"
-    build = "debug" if debug_mode else "release"
+    # We don't have a debug mode at conda-forge :/
 
     # Get lib filename for supported platforms
     if sys.platform.startswith("win"):  # no-cover
-        lib_filename = f"wgpu_native-{build}.dll"
+        lib_filename = "wgpu_native.dll"
     elif sys.platform.startswith("darwin"):  # no-cover
-        lib_filename = f"libwgpu_native-{build}.dylib"
+        lib_filename = "libwgpu_native.dylib"
     elif sys.platform.startswith("linux"):  # no-cover
-        lib_filename = f"libwgpu_native-{build}.so"
+        lib_filename = "libwgpu_native.so"
     else:  # no-cover
         raise RuntimeError(
             f"No WGPU library shipped for platform {sys.platform}. Set WGPU_LIB_PATH instead."
         )
 
-    # Note that this can be a false positive, e.g. ARM linux.
-    embedded_path = get_resource_filename(lib_filename)
-    if not os.path.isfile(embedded_path):  # no-cover
-        download_hint = _maybe_get_hint_on_download_script()
-        pip_hint = _maybe_get_pip_hint()
-        raise RuntimeError(
-            f"Could not find WGPU library in {embedded_path}. {download_hint} {pip_hint}"
-        )
-    else:
-        return embedded_path
+    return lib_filename
 
 
 def _maybe_get_hint_on_download_script():
-- 
2.40.1

